@page "/code"
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject IJSRuntime jsRuntime
@inject Models.MyFile myFile
@inject Services.Analysis Analyzer;

<h3>Code</h3>
<div class="bigdiv" style="width: 100%">
<div style="width: 50%; float: left">
    <table>
        <tr>
            <th>CU/order</th>
            @for(int k = 0; k < Analyzer.CUs+1; k++)
            {
                <td style="min-width:50px">@k</td>
            }
        </tr>
    @for(int i = 0; i < Analyzer.myElements.Count; i++)
    {
            int ii = i;
            <tr>
                <td>@(i+1)</td>
                @for(int j = 0; j < Analyzer.CUs+1; j++)
                {
                        <td style="min-width:50px">
                            @if (j==Analyzer.myElements[ii].ComputeUnit | (j!=0 & -1==Analyzer.myElements[ii].ComputeUnit))
                            {
                                <button title=@Analyzer.myElements[ii].Name @onclick="() =>{ChangeColor(Analyzer.myElements[ii].Index);ScrollTo(Analyzer.myElements[ii].Index);}">@(i+1)</button>
                            }
                        </td>
                }

        </tr>
    }
    </table>
</div>
<div class="codetext" style="margin-left: 50%">

@foreach (var item in myFile.Lines)
{   
        <p id="line{@myFile.Lines.IndexOf(item)}" style="background-color:@item.color">@item.line</p>
}
</div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {

    }

    private void ScrollTo(int i)
    {   if (i > 10)
        {
            jsRuntime.InvokeAsync<bool>("test","line{" + (i-8) + "}");
        }
        
    }
    private void ChangeColor(int i)
    {
        foreach(var item in myFile.Lines)
        {
            item.color = "white";
        }
        myFile.Lines[i].color = "lime";
    }

}
